# -*- python -*-
# ex: set filetype=python:

# from buildbot.plugins import worker, steps, schedulers, changes, util
import os
import pathlib
import subprocess
import tempfile

import docker
import requests
from buildbot.plugins import secrets, util, worker
from hippo.build_deb import deb_jobs

repos = [
    'acoustic_msgs',
    'alpha_msgs',
    'buttons_msgs',
    'dvl_msgs',
    'gantry_msgs',
    'hippo_control_msgs',
    'hippo_msgs',
    'rapid_trajectories_msgs',
    'state_estimation_msgs',
    'uvms_msgs',
    'px4_msgs',
    'hippo_common',
    'hippo_control',
    'hardware',
    'esc',
    'path_planning',
    'remote_control',
    'dvl',
    'gantry',
    'hippo_common_msgs',
    'hippo_gz_plugins',
    'hippo_sim',
    'hippo_robot',
    'hippo_full',
]

pkgs = []

with tempfile.TemporaryDirectory(dir='/tmp') as tmp_dir_name:
    for repo in repos:
        tmp_dir = pathlib.Path(tmp_dir_name)
        repo_path = pathlib.Path(tmp_dir_name + '/' + repo)
        repo_path.mkdir()
        xml_path = repo_path / 'package.xml'
        repo_url = f'https://raw.githubusercontent.com/HippoCampusRobotics/{repo}/main/package.xml'
        with requests.get(repo_url) as r:
            if r.status_code != 200:
                raise RuntimeError(f'Could not get package.xml for {repo}')
            with open(str(xml_path), 'wb') as f:
                f.write(r.content)
    cmd = ['colcon', 'list', '-t']
    result = subprocess.run(cmd, text=True, stdout=subprocess.PIPE, cwd=tmp_dir)
    lines = result.stdout.splitlines()
    for line in lines:
        name, path, _ = line.split('\t')
        pkgs.append(
            {'name': name, 'path': path, 'dependencies': [], 'dependents': []}
        )

    cmd = ['colcon', 'graph']
    result = subprocess.run(cmd, text=True, stdout=subprocess.PIPE, cwd=tmp_dir)
    lines = result.stdout.splitlines()
    n_pkgs = len(lines)
    for i, line in enumerate(lines):
        dep_substring = line[-n_pkgs:]
        indices = [
            idx for idx, c in enumerate(dep_substring) if (c == '*' or c == '.')
        ]
        pkgs[i]['dependents'] = [pkgs[x]['name'] for x in indices]
        if indices:
            for idx in indices:
                pkgs[idx]['dependencies'].append(pkgs[i]['name'])


c = BuildmasterConfig = {}

c['secretsProviders'] = [secrets.SecretInAFile(dirname='/buildbot-secrets')]
c['protocols'] = {'pb': {'port': 9989}}
c['services'] = []
c['title'] = 'HippoCampus Robotics CI'
c['titleURL'] = 'https://buildbot.hippocampus-robotics.net'

c['buildbotURL'] = 'https://buildbot.hippocampus-robotics.net/'

c['workers'] = []
c['builders'] = []
c['schedulers'] = []
c['change_source'] = []

worker_names = []
workers = {'amd64': [], 'arm64': []}
for i in range(1):
    ulimit = docker.types.Ulimit(name='nofile', soft=1024, hard=2048)
    rosdistro = 'jazzy'
    worker_name = f'{rosdistro}-latent-worker-{i}'
    worker_names.append(worker_name)
    XDG_RUNTIME_DIR = os.getenv('XDG_RUNTIME_DIR')
    HOST = os.getenv('HOST')
    workers['amd64'].append(
        worker.DockerLatentWorker(
            worker_name,
            None,
            docker_host=f'unix://{XDG_RUNTIME_DIR}/docker.sock',
            # masterFQDN="localhost",
            masterFQDN=f'{HOST}',
            # hostconfig={"network_mode": "host", "ulimits": [ulimit]},
            hostconfig={
                'port_bindings': {9989: 9989},
                'ulimits': [ulimit],
                'extra_hosts': {HOST: '138.201.192.117'},
            },
            image=f'lennartalff/hippo-latent-worker-amd64:{rosdistro}',
            build_wait_timeout=0,
            followStartupLogs=True,
            max_builds=1,
            alwaysPull=True,
        )
    )
    workers['arm64'].append(
        worker.DockerLatentWorker(
            f'{rosdistro}-latent-worker-arm64-{i}',
            None,
            masterFQDN='buildbot.hippocampus-robotics.net:9989',
            docker_host='ssh://pi@lennartalff.net:5522',
            hostconfig={
                'network_mode': 'host',
                'ulimits': [ulimit],
                'extra_hosts': {
                    'buildbot.hippocampus-robotics.net': '138.201.192.117'
                },
            },
            image=f'lennartalff/hippo-latent-worker-arm64:{rosdistro}',
            build_wait_timeout=0,
            followStartupLogs=True,
            max_builds=1,
            alwaysPull=True,
        )
    )
for arch in workers:
    c['workers'].extend(workers[arch])

deb_jobs(c, pkgs, workers)

# minimalistic config to activate new web UI
c['www'] = {
    'port': 8010,
    'change_hook_dialects': {
        'github': {
            'secret': util.Secret('webhook_secret'),
        },
    },
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
        'badges': {
            'left_pad': 20,
            'right_pad': 20,
            'border_radius': 3,
            'style': 'plastic',
        },
    },
    'ws_ping_interval': 60,
    'auth': util.GitHubAuth(
        'Ov23li0OdkTQkJTfdTbn',
        util.Secret('clientsecret_hippocampus'),
        apiVersion=4,
        getTeamsMembership=False,
    ),
    'authz': util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role='HippoCampusRobotics'),
        ],
        roleMatchers=[util.RolesFromGroups()],
    ),
}

####### DB URL

c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}
